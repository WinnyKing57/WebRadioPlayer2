name: Build APK

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip openjdk-11-jdk git unzip libtool automake autoconf pkg-config m4
        echo "Verifying autotools installations and m4 files..."
        libtool --version || echo "libtool not found or version error"
        autoconf --version || echo "autoconf not found or version error"
        automake --version || echo "automake not found or version error"
        pkg-config --version || echo "pkg-config not found or version error"
        m4 --version || echo "m4 not found or version error"
        
        echo "Listing contents of /usr/share/aclocal/ to check for libtool.m4..."
        ls -la /usr/share/aclocal/ || echo "/usr/share/aclocal/ not found or cannot be listed"
        if [ -f "/usr/share/aclocal/libtool.m4" ]; then
          echo "libtool.m4 found in /usr/share/aclocal/"
        else
          echo "WARNING: libtool.m4 NOT found in /usr/share/aclocal/"
        fi
        # Attempt to update aclocal's cache if possible (may require specific permissions or context)
        # As a general step, just ensure it's callable.
        aclocal --version || echo "aclocal not found or version error"
        echo "Autotools verification commands complete."
        pip install buildozer cython

        # Set SDK root path (Buildozer's default)
        export ANDROID_SDK_ROOT=${HOME}/.buildozer/android/platform/android-sdk
        mkdir -p ${ANDROID_SDK_ROOT}
        echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
        echo "ANDROID_HOME=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV # Also set ANDROID_HOME

        # Download and install Android SDK command-line tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        mkdir -p ${ANDROID_SDK_ROOT}/cmdline-tools-tmp # Temporary directory for unzipping
        unzip -q cmdline-tools.zip -d ${ANDROID_SDK_ROOT}/cmdline-tools-tmp
        rm cmdline-tools.zip

        # The zip typically creates a 'cmdline-tools' directory inside cmdline-tools-tmp.
        # We need to move its contents (bin, lib, etc.) to mimic the old SDK structure
        # where sdkmanager was in $SDK_ROOT/tools/bin/sdkmanager.
        # The 'cmdline-tools' unzipped folder often contains subfolders like 'bin', 'lib'.
        # We are taking the contents of the unzipped 'cmdline-tools' (e.g. cmdline-tools-tmp/cmdline-tools/*)
        # and placing them into $ANDROID_SDK_ROOT/tools/
        # Specifically, files from cmdline-tools/bin -> $ANDROID_SDK_ROOT/tools/bin
        # and cmdline-tools/lib -> $ANDROID_SDK_ROOT/tools/lib

        # Create the target $ANDROID_SDK_ROOT/tools directory
        mkdir -p ${ANDROID_SDK_ROOT}/tools

        # Move the contents of the unzipped 'cmdline-tools' directory (e.g., cmdline-tools/bin, cmdline-tools/lib)
        # into the $ANDROID_SDK_ROOT/tools directory.
        # The structure within commandlinetools-linux-9477386_latest.zip is a single 'cmdline-tools' folder.
        # So, after unzipping to cmdline-tools-tmp, we have cmdline-tools-tmp/cmdline-tools/
        mv ${ANDROID_SDK_ROOT}/cmdline-tools-tmp/cmdline-tools/* ${ANDROID_SDK_ROOT}/tools/
        rm -rf ${ANDROID_SDK_ROOT}/cmdline-tools-tmp

        # Ensure the sdkmanager is executable
        chmod +x ${ANDROID_SDK_ROOT}/tools/bin/sdkmanager || true # Allow to fail if not found, but should be there

        # Add $ANDROID_SDK_ROOT/tools/bin to PATH for this step and subsequent steps
        export PATH=${ANDROID_SDK_ROOT}/tools/bin:${PATH}
        echo "PATH=${PATH}" >> $GITHUB_ENV

        echo "Android SDK command-line tools installed and configured for legacy path."
        echo "SDK Manager should be at: ${ANDROID_SDK_ROOT}/tools/bin/sdkmanager"
        ls -la ${ANDROID_SDK_ROOT}/tools/bin/ || true # List contents for verification

    - name: Accept Android licenses
      run: |
        # ANDROID_SDK_ROOT is now ${HOME}/.buildozer/android/platform/android-sdk
        # Create license directories in common locations.
        mkdir -p ${ANDROID_SDK_ROOT}/licenses
        mkdir -p ${HOME}/.android/licenses

        # Pre-accept common licenses by writing their hashes to files.
        # Buildozer's internal SDK manager might pick these up.
        LICENSE_DIR_1=${ANDROID_SDK_ROOT}/licenses
        LICENSE_DIR_2=${HOME}/.android/licenses

        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" | tee ${LICENSE_DIR_1}/android-sdk-license ${LICENSE_DIR_2}/android-sdk-license > /dev/null
        echo "84831b9409646a918e30573bab4c9c91346d8abd" | tee ${LICENSE_DIR_1}/android-sdk-preview-license ${LICENSE_DIR_2}/android-sdk-preview-license > /dev/null
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" | tee ${LICENSE_DIR_1}/android-sdk-arm-dbt-license ${LICENSE_DIR_2}/android-sdk-arm-dbt-license > /dev/null
        echo "fd6b01a7e7a4e4f37591efa21e1a51710ac17ef4" | tee ${LICENSE_DIR_1}/intel-android-extra-license ${LICENSE_DIR_2}/intel-android-extra-license > /dev/null
        # Add the hash that was specifically problematic for build-tools;36.0.0, just in case.
        # The problematic hash for "Android SDK Build-Tools 36" if known, could be added.
        # However, since we don't have a specific hash for "build-tools;36.0.0" from the logs,
        # we'll rely on the `buildozer android update -p` step to handle this.
        # For now, the generic ones are included.

        echo "Pre-accepted some common Android SDK licenses."

    - name: Build APK
      run: |
        echo "Cleaning Buildozer caches and previous build artifacts..."
        rm -rf .buildozer/android/platform/build-* 
        rm -rf .buildozer/android/platform/dist-* 
        rm -rf .buildozer/android/packages/* 
        rm -rf .buildozer/android/app/ # This might be excessive, but ensures a clean state for app sources if they are copied here
        # Alternatively, a more targeted clean for packages:
        # rm -rf .buildozer/android/platform/build-*/{build,dists,other_stuff_related_to_recipes}
        # rm -rf .buildozer/android/packages/libffi # Example if libffi is suspected
        # For now, the broader rm -rf lines are used for a more thorough clean.

        echo "Caches cleaned."

        yes | buildozer android update -p
        buildozer -v android debug
        ls -la bin/

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: webradio-apk
        path: bin/*.apk
